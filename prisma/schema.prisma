// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  schema   = "auth"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id          String       @id @default(cuid())
  name        String       @unique
  email       String       @unique
  phone       String[]
  address     String
  userSchools UserSchool[]
  roles       Role[]
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model UserSchool {
  id        String   @id @default(cuid())
  userId    String
  schoolId  String
  user      User     @relation(fields: [userId], references: [id])
  school    School   @relation(fields: [schoolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, schoolId])
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  username     String       @unique
  password     String
  userSchools  UserSchool[]
  student      Student?
  staff        Staff?
  Parent       Parent?
  isSuperAdmin Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  permissions Permission[]
  schoolId    String
  school      School       @relation(fields: [schoolId], references: [id])
  staffs      Staff[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id        String   @id @default(cuid())
  name      String   @unique
  roles     Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  admission_number  Int      @unique @default(autoincrement())
  name              String
  gender            Gender
  dob               DateTime
  phone             String?
  email             String?
  address           String
  admission_date    DateTime @default(now())
  religion          String?
  blood_group       String?
  father_name       String?
  mother_name       String?
  guardian_name     String?
  guardian_phone    String?
  father_occupation String?
  mother_occupation String?
  section_id        String
  session_id        String
  isActive          Boolean  @default(true)
  city              String?
  state             String?
  country           String?
  route_vehicle_id  String?
  room_id           String?
  added_by          String
  photo_url         String?
  isStudent         Boolean  @default(true)
  parent            Parent?  @relation(fields: [parentId], references: [id])
  parentId          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Staff {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  name          String
  phone         String[]
  email         String?
  address       String
  roles         Role[]
  schoolId      String
  designation   String?
  dob           DateTime?
  salary        Int?
  joining_date  DateTime?
  gender        Gender?
  photo_url     String?
  isActive      Boolean   @default(true)
  qualification String?
  notes         String?
  section_id    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Parent {
  id        String    @id @default(cuid())
  userId    String    @unique
  user      User      @relation(fields: [userId], references: [id])
  name      String
  phone     String?
  email     String?
  address   String?
  students  Student[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
